openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
servers:
  - url: http://0.0.0.0:4010
paths:
  /item:
     get:
      tags:
        - item
      description: 商品のリストを取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemPreview'
  /item/search:
     get:
      tags:
        - item
      parameters:
        - in: query
          name: keyword
          required: true
          schema:
            type: string
            description: itemId
      description: 検索結果の商品のリストを取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemPreview'

  /item/{itemId}:
    get:
      tags:
        - item
      description: itemIdから商品の詳細情報を取得します
      parameters:
        - in: path
          name: itemId   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            description: itemId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemOverview'
                   
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /userauthstatus:
    post:
      tags:
        - userManagement
      description: そのEmailがサインイン可能かを判定します  
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              example:
                email: hogehoge@example.com

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:  
                type: object
                properties:
                  isExist:
                    type: boolean
                example:
                  isExist: true
        '400':
          description: そのEmailが適切な形でない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'
  /user:
    get:
      tags:
        - user
      description: ユーザーの個人情報を返します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'

    post:
      tags:
        - user
      description: ユーザーの個人情報を登録します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 追加しようとしている内容に誤りが合った場合やすでに登録されている場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
 
    patch:
      tags:
        - user
      description: ユーザーの個人情報を修正します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 追加しようとしている内容に誤りが合った場合や情報が登録されていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
 
    delete:
      tags:
        - user
      description: ユーザーを削除します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: deleted user successfully
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: そのEmailに紐づくアカウントが存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
                
  /user/cart:
    get:
      tags:
        - user
      description: カートを取得します      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object           
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
 
    post:
      tags:
        - user
      description: カートに商品を追加します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartRequest'   
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 追加しようとしている内容に誤りが合った場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'            
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
 
    patch:
      tags:
        - user
      description: ユーザーのカートに入っている商品の数量を変更します
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartRequest'          
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
     
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: 商品がカートに存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

    delete:
      tags:
        - user
      description: ユーザーのカートから商品を削除します
      parameters:
        - in: query
          name: itemId
          required: true
          schema:
            type: string
            description: itemId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
     
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: 商品がカートに存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /user/buy:
    get:
      tags:
        - user
      description: 商品を購入します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 購入するための条件を満たしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'       
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'

  /user/transaction:
    get:
      tags:
        - user
      description: 取引履歴を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
     
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'

  /user/transaction/{transactionId}:
    get:
      tags:
        - user
      description: 取引の詳細情報を取得します
      parameters:
        - in: path
          name: transactionId   # Note the name is the same as in the path
          required: true
          schema:
            type: string
            description: itemId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/itemOverview'
        '400':
          description: パラメータが間違っている場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest' 
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '404':
          description: 取引が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /manufacturer:
    get:
      tags:
        - manufacturer
      description: 出品者の情報を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'                  

    post:
      tags:
        - manufacturer
      description: 出品者の情報を登録します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 登録しようとしている情報に間違いがあった場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'                
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'          

    patch:
      tags:
        - manufacturer
      description: 出品者の登録情報を修正します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 情報が登録されていない場合や登録情報に誤りがあった場合に返します
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'        

  /manufacturer/list:
    get: 
      tags:
        - manufacturer      
      description: 出品者の商品一覧を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'    
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'       
  
  /manufacturer/item:
    get: 
      tags:
        - manufacturer      
      parameters:
        - in: query
          name: itemId   
          required: true
          schema:
            type: string
          description: itemId
      description: 商品情報を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'    
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'                
  
    post: 
      tags:
        - manufacturer      
      description: 商品情報を登録します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 追加しようとしている内容に誤りが合った場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'                  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
  
    patch: 
      tags:
        - manufacturer      
      description: 商品情報を修正します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 修正しようとしている内容に誤りが合った場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'                  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
  
    delete:
      tags:
        - manufacturer      
      parameters:
        - in: query
          name: itemId   
          required: true
          schema:
            type: string
          description: itemId
      description: 商品を削除します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /manufacturer/stripe/create:
    get:
      tags:
        - manufacturer
        - stripe
      description: stripeの出品者の登録を行います stripeの登録用URLを返します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: https://example.com

        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   

  /manufacturer/stripe/mypage:
    get:
      tags:
        - manufacturer
        - stripe
      description: stripeのマイページへのURLを返します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: https://example.com

        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  

  /admin/item:
    get:
      tags:
        - admin
      description: 現在登録されている商品をすべて取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   
 
    post: 
      tags:
        - admin     
      description: 商品情報を登録します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 追加しようとしている内容に誤りが合った場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'                  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
 
    patch: 
      tags:
        - admin      
      description: 商品情報を修正します
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: 修正しようとしている内容に誤りが合った場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequest'                  
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
  
    delete:
      tags:
        - admin 
      parameters:
        - in: query
          name: itemId   
          required: true
          schema:
            type: string
          description: itemId
      description: 商品を削除します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   
        '404':
          description: 商品が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /admin/user:
    get:
      tags:
        - admin
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
            description: userId
      description: ユーザーの情報を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'
        '404':
          description: ユーザーが存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

    delete:
      tags:
        - admin 
      parameters:
        - in: query
          name: userId   
          required: true
          schema:
            type: string
          description: itemId
      description: ユーザーを削除します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   
        '404':
          description: ユーザーが存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /admin/manufacturer:
    get:
      tags:
        - admin
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
            description: userId
      description: 出品者の情報を取得します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
        '404':
          description: 出品者が存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'                

    delete:
      tags:
        - admin 
      parameters:
        - in: query
          name: userId   
          required: true
          schema:
            type: string
          description: itemId
      description: ユーザーを削除します
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'   
        '404':
          description: ユーザーが存在しないときに返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'

  /admin/manufacturer/raise:
    post:
      tags:
        - admin
      description: ユーザーを出品者へ権限昇格させます
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string  
                  example: hogehoge@example.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: ログインしていない場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorized'
        '403':
          description: 権限がないアカウントからのリクエストの場合に返します
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbidden'  
              
  
components:
  schemas:

    notFound:
      type: object
      properties:
        message:
          type: string 
      example:
        message: not found

    badRequest:
      type: object
      properties:
        message:
          type: string 
      example:
        message: bad request

    unauthorized:
      type: object
      properties:
        message:
          type: string
      example:
        message: Unauthorized

    forbidden:
      type: object
      properties:
        message:
          type: string 
      example:
        message: forbidden
    
    cartRequest:
      type: object
      properties:
        itemId:
          type: string
        quantity:
          type: integer
      example:
        itemId: f6d655da-6fff-11ee-b3bc-e86a6465f38b
        quantity: 1

    itemPreview:
      type: object
      properties:
        itemId:
          type: string
        properties:
          type: object
          properties:
            name: 
              type: string
            price:
              type: number
              format: bouble
            details:
              type: object
              properties:
                status:
                  type: string
      example:
        - itemId: f6d655da-6fff-11ee-b3bc-e86a6465f38b
          properties:
          name: クラウディ・エンチャント
          price: 2480
          details:
            status: Available
        - itemId: a64f1463-abd2-11ee-a4c7-e86a6465f38b
          properties:
            name: ゴールデン・ハーモニー
            price: 9800
            details:
              status: Available

    itemOverview:
      type: object
      properties:
        itemId:
          type: string
        properties:
          type: object
          properties:
            name:
              type: string
            price:
              type: number
              format: double
            size:
                type: number
        details:
          type: object
          properties:
            status:
              type: string
            stock:
              type: number
            description:
              type: string
            tags: 
              type: object
              properties:
                color:
                  type: string
                series:
                  type: string
        manufacturer:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
      example:
        itemId: a64f1463-abd2-11ee-a4c7-e86a6465f38b
        properties:
          name: ゴールデン・ハーモニー
          price: 9800
          details:
            status: Available
            stock: 1
            size: 16
            description: シトリンは、豊かさと繁栄を象徴するクリスタルと...
            tags:
              color: 黄
              series: Lucky Aura
          manufacturer:
            name: kumi
            description: 心を込めた商品を制作しております...

tags:
  - name: item
    description: 商品関連のAPI 認証不要
  - name: userManagement
    description: サインアップ、サインイン関連 認証不要
  - name: user
    description: ユーザー関連 要認証
  - name: manufacturer
    description: 出品者関連 要認証
  - name: admin
    description: 管理者関連 要認証
  - name: stripe
    description: stripe関連 要認証
